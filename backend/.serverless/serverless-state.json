{
  "service": {
    "service": "python-pdf-chat",
    "serviceObject": {
      "name": "python-pdf-chat"
    },
    "provider": {
      "name": "aws",
      "stage": "dev",
      "region": "us-east-1",
      "tracing": {
        "lambda": true
      },
      "httpApi": {
        "cors": true,
        "authorizers": {
          "cognitoAuthorizer": {
            "identitySource": "$request.header.Authorization",
            "issuerUrl": {
              "Fn::Sub": "https://cognito-idp.us-east-1.amazonaws.com/${CognitoUserPool}"
            },
            "audience": [
              {
                "Ref": "CognitoUserPoolClient"
              }
            ]
          }
        }
      },
      "layers": [
        "arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:51"
      ],
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:ListBucket"
              ],
              "Resource": "arn:aws:s3:::python-pdf-chat-dev-us-east-1-947403101409/*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:Query",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "DocumentTable",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:Query",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "MemoryTable",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "sqs:SendMessage",
                "sqs:ReceiveMessage",
                "sqs:DeleteMessage"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "EmbeddingQueue",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "bedrock:InvokeModel"
              ],
              "Resource": [
                "arn:aws:bedrock:*::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0",
                "arn:aws:bedrock:*::foundation-model/cohere.embed-multilingual-v3"
              ]
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GeneratePresignedUrlLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/python-pdf-chat-dev-GeneratePresignedUrl"
            }
          },
          "UploadTriggerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/python-pdf-chat-dev-UploadTrigger"
            }
          },
          "GetDocumentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/python-pdf-chat-dev-GetDocument"
            }
          },
          "GetAllDocumentsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/python-pdf-chat-dev-GetAllDocuments"
            }
          },
          "AddConversationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/python-pdf-chat-dev-AddConversation"
            }
          },
          "GenerateEmbeddingsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/python-pdf-chat-dev-GenerateEmbeddings"
            }
          },
          "GenerateResponseLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/python-pdf-chat-dev-GenerateResponse"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "python-pdf-chat",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/python-pdf-chat-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/python-pdf-chat-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][3]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][4]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "xray:PutTraceSegments",
                          "xray:PutTelemetryRecords"
                        ],
                        "Resource": [
                          "*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "EmbeddingQueue",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "python-pdf-chat",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GeneratePresignedUrlLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/python-pdf-chat/dev/1716478544110-2024-05-23T15:35:44.110Z/generate_presigned_url-python-pdf-chat-dev-GeneratePresignedUrl.zip"
              },
              "Handler": "main.handler",
              "Runtime": "python3.11",
              "FunctionName": "python-pdf-chat-dev-GeneratePresignedUrl",
              "MemorySize": 1024,
              "Timeout": 29,
              "Architectures": [
                "arm64"
              ],
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "BUCKET": "python-pdf-chat-dev-us-east-1-947403101409",
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:51"
              ]
            },
            "DependsOn": [
              "GeneratePresignedUrlLogGroup"
            ]
          },
          "UploadTriggerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/python-pdf-chat/dev/1716478544110-2024-05-23T15:35:44.110Z/upload_trigger-python-pdf-chat-dev-UploadTrigger.zip"
              },
              "Handler": "main.handler",
              "Runtime": "python3.11",
              "FunctionName": "python-pdf-chat-dev-UploadTrigger",
              "MemorySize": 1024,
              "Timeout": 6,
              "Architectures": [
                "arm64"
              ],
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "DOCUMENT_TABLE": {
                    "Ref": "DocumentTable"
                  },
                  "MEMORY_TABLE": {
                    "Ref": "MemoryTable"
                  },
                  "QUEUE": {
                    "Fn::GetAtt": [
                      "EmbeddingQueue",
                      "QueueName"
                    ]
                  },
                  "BUCKET": "python-pdf-chat-dev-us-east-1-947403101409"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:51"
              ]
            },
            "DependsOn": [
              "UploadTriggerLogGroup"
            ]
          },
          "GetDocumentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/python-pdf-chat/dev/1716478544110-2024-05-23T15:35:44.110Z/GetDocument.zip"
              },
              "Handler": "src/get_document/main.handler",
              "Runtime": "python3.11",
              "FunctionName": "python-pdf-chat-dev-GetDocument",
              "MemorySize": 1024,
              "Timeout": 29,
              "Architectures": [
                "arm64"
              ],
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "DOCUMENT_TABLE": {
                    "Ref": "DocumentTable"
                  },
                  "MEMORY_TABLE": {
                    "Ref": "MemoryTable"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:51"
              ]
            },
            "DependsOn": [
              "GetDocumentLogGroup"
            ]
          },
          "GetAllDocumentsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/python-pdf-chat/dev/1716478544110-2024-05-23T15:35:44.110Z/GetAllDocuments.zip"
              },
              "Handler": "src/get_all_documents/main.handler",
              "Runtime": "python3.11",
              "FunctionName": "python-pdf-chat-dev-GetAllDocuments",
              "MemorySize": 1024,
              "Timeout": 29,
              "Architectures": [
                "arm64"
              ],
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "DOCUMENT_TABLE": {
                    "Ref": "DocumentTable"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:51"
              ]
            },
            "DependsOn": [
              "GetAllDocumentsLogGroup"
            ]
          },
          "AddConversationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/python-pdf-chat/dev/1716478544110-2024-05-23T15:35:44.110Z/add_conversation-python-pdf-chat-dev-AddConversation.zip"
              },
              "Handler": "main.handler",
              "Runtime": "python3.11",
              "FunctionName": "python-pdf-chat-dev-AddConversation",
              "MemorySize": 1024,
              "Timeout": 29,
              "Architectures": [
                "arm64"
              ],
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "DOCUMENT_TABLE": {
                    "Ref": "DocumentTable"
                  },
                  "MEMORY_TABLE": {
                    "Ref": "MemoryTable"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:51"
              ]
            },
            "DependsOn": [
              "AddConversationLogGroup"
            ]
          },
          "GenerateEmbeddingsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/python-pdf-chat/dev/1716478544110-2024-05-23T15:35:44.110Z/generate_embeddings-python-pdf-chat-dev-GenerateEmbeddings.zip"
              },
              "Handler": "main.handler",
              "Runtime": "python3.11",
              "FunctionName": "python-pdf-chat-dev-GenerateEmbeddings",
              "MemorySize": 1024,
              "Timeout": 29,
              "Architectures": [
                "arm64"
              ],
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "DOCUMENT_TABLE": {
                    "Ref": "DocumentTable"
                  },
                  "BUCKET": "python-pdf-chat-dev-us-east-1-947403101409"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:51"
              ]
            },
            "DependsOn": [
              "GenerateEmbeddingsLogGroup"
            ]
          },
          "GenerateResponseLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/python-pdf-chat/dev/1716478544110-2024-05-23T15:35:44.110Z/generate_response-python-pdf-chat-dev-GenerateResponse.zip"
              },
              "Handler": "main.handler",
              "Runtime": "python3.11",
              "FunctionName": "python-pdf-chat-dev-GenerateResponse",
              "MemorySize": 1024,
              "Timeout": 29,
              "Architectures": [
                "arm64"
              ],
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "MEMORY_TABLE": {
                    "Ref": "MemoryTable"
                  },
                  "BUCKET": "python-pdf-chat-dev-us-east-1-947403101409"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:51"
              ]
            },
            "DependsOn": [
              "GenerateResponseLogGroup"
            ]
          },
          "AddConversationLambdaVersion2G5ybUjgRQSfTGRlyJQaKQqVQ6ZmSUGEb2Y4fj8F0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddConversationLambdaFunction"
              },
              "CodeSha256": "iccFyxKcyW/bEYA6iB5bQ5DGmG+M70XON43FPQAzcL4="
            }
          },
          "GetAllDocumentsLambdaVersion7eadHT4EpJh2ivj4Ui8smcCEpQs8YIFRbuL11QOU6M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllDocumentsLambdaFunction"
              },
              "CodeSha256": "PW0eDCv8WXxWpYCE5IjGh3nJbxXn/hlsDosoQyOWFeg="
            }
          },
          "GetDocumentLambdaVersionrFjukTFNvADBgT08niC2ReYfyxsIjelS6iKUcSajqs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDocumentLambdaFunction"
              },
              "CodeSha256": "PW0eDCv8WXxWpYCE5IjGh3nJbxXn/hlsDosoQyOWFeg="
            }
          },
          "GeneratePresignedUrlLambdaVersionU72udCgDGLk9V2yEGcf5szXSiufsAPunAum7nW2QPQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GeneratePresignedUrlLambdaFunction"
              },
              "CodeSha256": "DKK5FsgH+XnCgXQO+IOPMgkK9riVKWQatatFthdMKvs="
            }
          },
          "UploadTriggerLambdaVersionvVsyVw1gvN8Av0J4XjFlCvyZiSEeRKGt1xXu3SMXSTA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UploadTriggerLambdaFunction"
              },
              "CodeSha256": "zMwqP79LFX4ZiedqrGatlm+9TgCNXVUn3Rc09JfOxFE="
            }
          },
          "GenerateResponseLambdaVersionLWWdeFbObdJEeNNILxyywiK5916psOi0Mt1qX6K5c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GenerateResponseLambdaFunction"
              },
              "CodeSha256": "jNoA9mBtGdgF2bG4XenXIOk1ei0q7tWtys2cHNKeepA="
            }
          },
          "GenerateEmbeddingsLambdaVersionHQIjUBgmqIsG9m6FoYm9N5wxqGo8aLKlMd3KweabZE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GenerateEmbeddingsLambdaFunction"
              },
              "CodeSha256": "8uPzc/Kw3C0DjAXYjRCksR7MIla2/z34ZU4hsnXzK0M="
            }
          },
          "UploadTriggerCustomS31": {
            "Type": "Custom::S3",
            "Version": 1,
            "DependsOn": [
              "UploadTriggerLambdaFunction",
              "CustomDashresourceDashexistingDashs3LambdaFunction"
            ],
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashexistingDashs3LambdaFunction",
                  "Arn"
                ]
              },
              "FunctionName": "python-pdf-chat-dev-UploadTrigger",
              "BucketName": "python-pdf-chat-dev-us-east-1-947403101409",
              "BucketConfigs": [
                {
                  "Event": "s3:ObjectCreated:*",
                  "Rules": [
                    {
                      "Suffix": ".pdf"
                    }
                  ]
                }
              ]
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "python-pdf-chat",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "s3",
                              "",
                              "",
                              "python-pdf-chat-dev-us-east-1-947403101409"
                            ]
                          ]
                        },
                        "Action": [
                          "s3:PutBucketNotification",
                          "s3:GetBucketNotification"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "lambda",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "function",
                              "*"
                            ]
                          ]
                        },
                        "Action": [
                          "lambda:AddPermission",
                          "lambda:RemovePermission"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashexistingDashs3LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/python-pdf-chat/dev/1716478544110-2024-05-23T15:35:44.110Z/custom-resources.zip"
              },
              "FunctionName": "python-pdf-chat-dev-custom-resource-existing-s3",
              "Handler": "s3/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs16.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "GenerateEmbeddingsEventSourceMappingSQSEmbeddingQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "EmbeddingQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "GenerateEmbeddingsLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-python-pdf-chat",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "AllowMethods": [
                  "OPTIONS",
                  "GET",
                  "POST"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "HttpApiAuthorizerCognitoAuthorizer": {
            "Type": "AWS::ApiGatewayV2::Authorizer",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "Name": "cognitoAuthorizer",
              "IdentitySource": [
                "$request.header.Authorization"
              ],
              "AuthorizerType": "JWT",
              "JwtConfiguration": {
                "Audience": [
                  {
                    "$ref": "$[\"service\"][\"provider\"][\"httpApi\"][\"authorizers\"][\"cognitoAuthorizer\"][\"audience\"][0]"
                  }
                ],
                "Issuer": {
                  "$ref": "$[\"service\"][\"provider\"][\"httpApi\"][\"authorizers\"][\"cognitoAuthorizer\"][\"issuerUrl\"]"
                }
              }
            }
          },
          "GeneratePresignedUrlLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GeneratePresignedUrlLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGeneratePresignedUrl": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GeneratePresignedUrlLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetGeneratepresignedurl": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /generate_presigned_url",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGeneratePresignedUrl"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerCognitoAuthorizer"
              }
            },
            "DependsOn": "HttpApiIntegrationGeneratePresignedUrl"
          },
          "GetDocumentLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDocumentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetDocument": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDocumentLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetDocDocumentidVarConversationidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /doc/{documentid}/{conversationid}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetDocument"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerCognitoAuthorizer"
              }
            },
            "DependsOn": "HttpApiIntegrationGetDocument"
          },
          "GetAllDocumentsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllDocumentsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllDocuments": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllDocumentsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetDoc": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /doc",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllDocuments"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerCognitoAuthorizer"
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllDocuments"
          },
          "AddConversationLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddConversationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAddConversation": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddConversationLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostDocDocumentidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /doc/{documentid}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAddConversation"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerCognitoAuthorizer"
              }
            },
            "DependsOn": "HttpApiIntegrationAddConversation"
          },
          "GenerateResponseLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GenerateResponseLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGenerateResponse": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GenerateResponseLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostDocumentidVarConversationidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /{documentid}/{conversationid}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGenerateResponse"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerCognitoAuthorizer"
              }
            },
            "DependsOn": "HttpApiIntegrationGenerateResponse"
          },
          "DocumentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "python-pdf-chat-dev-us-east-1-947403101409",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "HEAD",
                      "POST",
                      "DELETE"
                    ],
                    "AllowedOrigins": [
                      "*"
                    ]
                  }
                ]
              },
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": true,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": true
              }
            }
          },
          "DocumentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "PolicyDocument": {
                "Id": "EnforceHttpsPolicy",
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "EnforceHttpsSid",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Action": "s3:*",
                    "Resource": [
                      "arn:aws:s3:::python-pdf-chat-dev-us-east-1-947403101409/*",
                      "arn:aws:s3:::python-pdf-chat-dev-us-east-1-947403101409"
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": "false"
                      }
                    }
                  }
                ]
              },
              "Bucket": "python-pdf-chat-dev-us-east-1-947403101409"
            }
          },
          "EmbeddingQueue": {
            "Type": "AWS::SQS::Queue",
            "DeletionPolicy": "Delete",
            "UpdateReplacePolicy": "Delete",
            "Properties": {
              "VisibilityTimeout": 180,
              "MessageRetentionPeriod": 3600
            }
          },
          "EmbeddingQueuePolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "EmbeddingQueue"
                }
              ],
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Id": "SecureTransportPolicy",
                "Statement": [
                  {
                    "Sid": "AllowSecureTransportOnly",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Action": "SQS:*",
                    "Resource": "*",
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "DocumentTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Delete",
            "UpdateReplacePolicy": "Delete",
            "Properties": {
              "KeySchema": [
                {
                  "AttributeName": "userid",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "documentid",
                  "KeyType": "RANGE"
                }
              ],
              "AttributeDefinitions": [
                {
                  "AttributeName": "userid",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "documentid",
                  "AttributeType": "S"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "MemoryTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Delete",
            "UpdateReplacePolicy": "Delete",
            "Properties": {
              "KeySchema": [
                {
                  "AttributeName": "SessionId",
                  "KeyType": "HASH"
                }
              ],
              "AttributeDefinitions": [
                {
                  "AttributeName": "SessionId",
                  "AttributeType": "S"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "CognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "DeletionPolicy": "Delete",
            "UpdateReplacePolicy": "Delete",
            "Properties": {
              "AutoVerifiedAttributes": [
                "email"
              ],
              "UsernameAttributes": [
                "email"
              ],
              "AdminCreateUserConfig": {
                "AllowAdminCreateUserOnly": true
              },
              "Policies": {
                "PasswordPolicy": {
                  "MinimumLength": 8,
                  "RequireLowercase": true,
                  "RequireNumbers": true,
                  "RequireSymbols": true,
                  "RequireUppercase": true
                }
              }
            }
          },
          "CognitoUserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "ClientName": {
                "Ref": "CognitoUserPool"
              },
              "GenerateSecret": false
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-python-pdf-chat-dev-ServerlessDeploymentBucketName"
            }
          },
          "AddConversationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddConversationLambdaVersion2G5ybUjgRQSfTGRlyJQaKQqVQ6ZmSUGEb2Y4fj8F0"
            },
            "Export": {
              "Name": "sls-python-pdf-chat-dev-AddConversationLambdaFunctionQualifiedArn"
            }
          },
          "GetAllDocumentsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllDocumentsLambdaVersion7eadHT4EpJh2ivj4Ui8smcCEpQs8YIFRbuL11QOU6M"
            },
            "Export": {
              "Name": "sls-python-pdf-chat-dev-GetAllDocumentsLambdaFunctionQualifiedArn"
            }
          },
          "GetDocumentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDocumentLambdaVersionrFjukTFNvADBgT08niC2ReYfyxsIjelS6iKUcSajqs"
            },
            "Export": {
              "Name": "sls-python-pdf-chat-dev-GetDocumentLambdaFunctionQualifiedArn"
            }
          },
          "GeneratePresignedUrlLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GeneratePresignedUrlLambdaVersionU72udCgDGLk9V2yEGcf5szXSiufsAPunAum7nW2QPQ"
            },
            "Export": {
              "Name": "sls-python-pdf-chat-dev-GeneratePresignedUrlLambdaFunctionQualifiedArn"
            }
          },
          "UploadTriggerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UploadTriggerLambdaVersionvVsyVw1gvN8Av0J4XjFlCvyZiSEeRKGt1xXu3SMXSTA"
            },
            "Export": {
              "Name": "sls-python-pdf-chat-dev-UploadTriggerLambdaFunctionQualifiedArn"
            }
          },
          "GenerateResponseLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GenerateResponseLambdaVersionLWWdeFbObdJEeNNILxyywiK5916psOi0Mt1qX6K5c"
            },
            "Export": {
              "Name": "sls-python-pdf-chat-dev-GenerateResponseLambdaFunctionQualifiedArn"
            }
          },
          "GenerateEmbeddingsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GenerateEmbeddingsLambdaVersionHQIjUBgmqIsG9m6FoYm9N5wxqGo8aLKlMd3KweabZE"
            },
            "Export": {
              "Name": "sls-python-pdf-chat-dev-GenerateEmbeddingsLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-python-pdf-chat-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-python-pdf-chat-dev-HttpApiUrl"
            }
          },
          "CognitoUserPool": {
            "Value": {
              "Ref": "CognitoUserPool"
            }
          },
          "CognitoUserPoolClient": {
            "Value": {
              "Ref": "CognitoUserPoolClient"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "pythonRequirements": {
        "dockerizePip": true
      },
      "stackName": "python-pdf-chat-dev",
      "documentBucket": "python-pdf-chat-dev-us-east-1-947403101409",
      "cognitoUserPool": {
        "Ref": "CognitoUserPool"
      },
      "issuerUrl": {
        "Fn::Sub": "https://cognito-idp.us-east-1.amazonaws.com/${CognitoUserPool}"
      }
    },
    "plugins": [
      "serverless-python-requirements"
    ],
    "pluginsData": {},
    "functions": {
      "GeneratePresignedUrl": {
        "handler": "main.handler",
        "module": "src/generate_presigned_url",
        "runtime": "python3.11",
        "architecture": "arm64",
        "timeout": 29,
        "environment": {
          "BUCKET": "python-pdf-chat-dev-us-east-1-947403101409",
          "REGION": "us-east-1"
        },
        "events": [
          {
            "httpApi": {
              "path": "/generate_presigned_url",
              "method": "get",
              "authorizer": {
                "name": "cognitoAuthorizer"
              }
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/generate_presigned_url"
          }
        ],
        "name": "python-pdf-chat-dev-GeneratePresignedUrl",
        "package": {
          "artifact": ".serverless\\src\\generate_presigned_url-python-pdf-chat-dev-GeneratePresignedUrl.zip"
        },
        "memory": 1024,
        "vpc": {},
        "versionLogicalId": "GeneratePresignedUrlLambdaVersionU72udCgDGLk9V2yEGcf5szXSiufsAPunAum7nW2QPQ"
      },
      "UploadTrigger": {
        "handler": "main.handler",
        "module": "src/upload_trigger",
        "runtime": "python3.11",
        "architecture": "arm64",
        "environment": {
          "DOCUMENT_TABLE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UploadTriggerLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"DOCUMENT_TABLE\"]"
          },
          "MEMORY_TABLE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UploadTriggerLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"MEMORY_TABLE\"]"
          },
          "QUEUE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UploadTriggerLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"QUEUE\"]"
          },
          "BUCKET": "python-pdf-chat-dev-us-east-1-947403101409"
        },
        "events": [
          {
            "s3": {
              "bucket": "python-pdf-chat-dev-us-east-1-947403101409",
              "event": "s3:ObjectCreated:*",
              "rules": [
                {
                  "suffix": ".pdf"
                }
              ],
              "existing": true
            }
          }
        ],
        "name": "python-pdf-chat-dev-UploadTrigger",
        "package": {
          "artifact": ".serverless\\src\\upload_trigger-python-pdf-chat-dev-UploadTrigger.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "vpc": {},
        "versionLogicalId": "UploadTriggerLambdaVersionvVsyVw1gvN8Av0J4XjFlCvyZiSEeRKGt1xXu3SMXSTA"
      },
      "GetDocument": {
        "handler": "src/get_document/main.handler",
        "runtime": "python3.11",
        "architecture": "arm64",
        "timeout": 29,
        "environment": {
          "DOCUMENT_TABLE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDocumentLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"DOCUMENT_TABLE\"]"
          },
          "MEMORY_TABLE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDocumentLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"MEMORY_TABLE\"]"
          }
        },
        "events": [
          {
            "httpApi": {
              "path": "/doc/{documentid}/{conversationid}",
              "method": "get",
              "authorizer": {
                "name": "cognitoAuthorizer"
              }
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/doc/{documentid}/{conversationid}"
          }
        ],
        "name": "python-pdf-chat-dev-GetDocument",
        "module": ".",
        "package": {
          "artifact": "C:\\Users\\ferna\\Documents\\cpa-vision\\DevOps\\lambda-apps\\python-pdf-chat\\backend\\.serverless\\GetDocument.zip"
        },
        "memory": 1024,
        "vpc": {},
        "versionLogicalId": "GetDocumentLambdaVersionrFjukTFNvADBgT08niC2ReYfyxsIjelS6iKUcSajqs"
      },
      "GetAllDocuments": {
        "handler": "src/get_all_documents/main.handler",
        "runtime": "python3.11",
        "architecture": "arm64",
        "timeout": 29,
        "environment": {
          "DOCUMENT_TABLE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllDocumentsLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"DOCUMENT_TABLE\"]"
          }
        },
        "events": [
          {
            "httpApi": {
              "path": "/doc",
              "method": "get",
              "authorizer": {
                "name": "cognitoAuthorizer"
              }
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/doc"
          }
        ],
        "name": "python-pdf-chat-dev-GetAllDocuments",
        "module": ".",
        "package": {
          "artifact": "C:\\Users\\ferna\\Documents\\cpa-vision\\DevOps\\lambda-apps\\python-pdf-chat\\backend\\.serverless\\GetAllDocuments.zip"
        },
        "memory": 1024,
        "vpc": {},
        "versionLogicalId": "GetAllDocumentsLambdaVersion7eadHT4EpJh2ivj4Ui8smcCEpQs8YIFRbuL11QOU6M"
      },
      "AddConversation": {
        "handler": "main.handler",
        "module": "src/add_conversation",
        "runtime": "python3.11",
        "architecture": "arm64",
        "timeout": 29,
        "environment": {
          "DOCUMENT_TABLE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddConversationLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"DOCUMENT_TABLE\"]"
          },
          "MEMORY_TABLE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddConversationLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"MEMORY_TABLE\"]"
          }
        },
        "events": [
          {
            "httpApi": {
              "path": "/doc/{documentid}",
              "method": "post",
              "authorizer": {
                "name": "cognitoAuthorizer"
              }
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/doc/{documentid}"
          }
        ],
        "name": "python-pdf-chat-dev-AddConversation",
        "package": {
          "artifact": ".serverless\\src\\add_conversation-python-pdf-chat-dev-AddConversation.zip"
        },
        "memory": 1024,
        "vpc": {},
        "versionLogicalId": "AddConversationLambdaVersion2G5ybUjgRQSfTGRlyJQaKQqVQ6ZmSUGEb2Y4fj8F0"
      },
      "GenerateEmbeddings": {
        "handler": "main.handler",
        "module": "src/generate_embeddings",
        "runtime": "python3.11",
        "architecture": "arm64",
        "timeout": 29,
        "environment": {
          "DOCUMENT_TABLE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GenerateEmbeddingsLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"DOCUMENT_TABLE\"]"
          },
          "BUCKET": "python-pdf-chat-dev-us-east-1-947403101409"
        },
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][8][\"Resource\"][0]"
              },
              "batchSize": 1
            }
          }
        ],
        "name": "python-pdf-chat-dev-GenerateEmbeddings",
        "package": {
          "artifact": ".serverless\\src\\generate_embeddings-python-pdf-chat-dev-GenerateEmbeddings.zip"
        },
        "memory": 1024,
        "vpc": {},
        "versionLogicalId": "GenerateEmbeddingsLambdaVersionHQIjUBgmqIsG9m6FoYm9N5wxqGo8aLKlMd3KweabZE"
      },
      "GenerateResponse": {
        "handler": "main.handler",
        "module": "src/generate_response",
        "runtime": "python3.11",
        "architecture": "arm64",
        "timeout": 29,
        "environment": {
          "MEMORY_TABLE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GenerateResponseLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"MEMORY_TABLE\"]"
          },
          "BUCKET": "python-pdf-chat-dev-us-east-1-947403101409"
        },
        "events": [
          {
            "httpApi": {
              "path": "/{documentid}/{conversationid}",
              "method": "post",
              "authorizer": {
                "name": "cognitoAuthorizer"
              }
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/{documentid}/{conversationid}"
          }
        ],
        "name": "python-pdf-chat-dev-GenerateResponse",
        "package": {
          "artifact": ".serverless\\src\\generate_response-python-pdf-chat-dev-GenerateResponse.zip"
        },
        "memory": 1024,
        "vpc": {},
        "versionLogicalId": "GenerateResponseLambdaVersionLWWdeFbObdJEeNNILxyywiK5916psOi0Mt1qX6K5c"
      }
    },
    "resources": {
      "Resources": {
        "DocumentBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "python-pdf-chat-dev-us-east-1-947403101409",
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedHeaders": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET",
                    "PUT",
                    "HEAD",
                    "POST",
                    "DELETE"
                  ],
                  "AllowedOrigins": [
                    "*"
                  ]
                }
              ]
            },
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": true,
              "BlockPublicPolicy": true,
              "IgnorePublicAcls": true,
              "RestrictPublicBuckets": true
            }
          }
        },
        "DocumentBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "PolicyDocument": {
              "Id": "EnforceHttpsPolicy",
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "EnforceHttpsSid",
                  "Effect": "Deny",
                  "Principal": "*",
                  "Action": "s3:*",
                  "Resource": [
                    "arn:aws:s3:::python-pdf-chat-dev-us-east-1-947403101409/*",
                    "arn:aws:s3:::python-pdf-chat-dev-us-east-1-947403101409"
                  ],
                  "Condition": {
                    "Bool": {
                      "aws:SecureTransport": "false"
                    }
                  }
                }
              ]
            },
            "Bucket": "python-pdf-chat-dev-us-east-1-947403101409"
          }
        },
        "EmbeddingQueue": {
          "Type": "AWS::SQS::Queue",
          "DeletionPolicy": "Delete",
          "UpdateReplacePolicy": "Delete",
          "Properties": {
            "VisibilityTimeout": 180,
            "MessageRetentionPeriod": 3600
          }
        },
        "EmbeddingQueuePolicy": {
          "Type": "AWS::SQS::QueuePolicy",
          "Properties": {
            "Queues": [
              {
                "Ref": "EmbeddingQueue"
              }
            ],
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Id": "SecureTransportPolicy",
              "Statement": [
                {
                  "Sid": "AllowSecureTransportOnly",
                  "Effect": "Deny",
                  "Principal": "*",
                  "Action": "SQS:*",
                  "Resource": "*",
                  "Condition": {
                    "Bool": {
                      "aws:SecureTransport": false
                    }
                  }
                }
              ]
            }
          }
        },
        "DocumentTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Delete",
          "UpdateReplacePolicy": "Delete",
          "Properties": {
            "KeySchema": [
              {
                "AttributeName": "userid",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "documentid",
                "KeyType": "RANGE"
              }
            ],
            "AttributeDefinitions": [
              {
                "AttributeName": "userid",
                "AttributeType": "S"
              },
              {
                "AttributeName": "documentid",
                "AttributeType": "S"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "MemoryTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Delete",
          "UpdateReplacePolicy": "Delete",
          "Properties": {
            "KeySchema": [
              {
                "AttributeName": "SessionId",
                "KeyType": "HASH"
              }
            ],
            "AttributeDefinitions": [
              {
                "AttributeName": "SessionId",
                "AttributeType": "S"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "CognitoUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "DeletionPolicy": "Delete",
          "UpdateReplacePolicy": "Delete",
          "Properties": {
            "AutoVerifiedAttributes": [
              "email"
            ],
            "UsernameAttributes": [
              "email"
            ],
            "AdminCreateUserConfig": {
              "AllowAdminCreateUserOnly": true
            },
            "Policies": {
              "PasswordPolicy": {
                "MinimumLength": 8,
                "RequireLowercase": true,
                "RequireNumbers": true,
                "RequireSymbols": true,
                "RequireUppercase": true
              }
            }
          }
        },
        "CognitoUserPoolClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            },
            "ClientName": {
              "Ref": "CognitoUserPool"
            },
            "GenerateSecret": false
          }
        }
      },
      "Outputs": {
        "CognitoUserPool": {
          "Value": {
            "Ref": "CognitoUserPool"
          }
        },
        "CognitoUserPoolClient": {
          "Value": {
            "Ref": "CognitoUserPoolClient"
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "python-pdf-chat",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "package": {
        "individually": true,
        "patterns": [
          "!node_modules/**"
        ],
        "artifactsS3KeyDirname": "serverless/python-pdf-chat/dev/code-artifacts",
        "artifactDirectoryName": "serverless/python-pdf-chat/dev/1716478544110-2024-05-23T15:35:44.110Z"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/python-pdf-chat/dev/1716478544110-2024-05-23T15:35:44.110Z",
    "artifact": ""
  }
}