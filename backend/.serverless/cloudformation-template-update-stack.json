{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "GeneratePresignedUrlLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/python-pdf-chat-dev-GeneratePresignedUrl"
      }
    },
    "UploadTriggerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/python-pdf-chat-dev-UploadTrigger"
      }
    },
    "GetDocumentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/python-pdf-chat-dev-GetDocument"
      }
    },
    "GetAllDocumentsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/python-pdf-chat-dev-GetAllDocuments"
      }
    },
    "AddConversationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/python-pdf-chat-dev-AddConversation"
      }
    },
    "GenerateEmbeddingsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/python-pdf-chat-dev-GenerateEmbeddings"
      }
    },
    "GenerateResponseLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/python-pdf-chat-dev-GenerateResponse"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "python-pdf-chat",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/python-pdf-chat-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/python-pdf-chat-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "EmbeddingQueue",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "python-pdf-chat",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "GeneratePresignedUrlLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/python-pdf-chat/dev/1716421024077-2024-05-22T23:37:04.077Z/python-pdf-chat.zip"
        },
        "Handler": "src/generate_presigned_url/main.handler",
        "Runtime": "python3.11",
        "FunctionName": "python-pdf-chat-dev-GeneratePresignedUrl",
        "MemorySize": 1024,
        "Timeout": 29,
        "Architectures": [
          "arm64"
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "BUCKET": "python-pdf-chat-dev-us-east-1-947403101409",
            "REGION": "us-east-1"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:51"
        ]
      },
      "DependsOn": [
        "GeneratePresignedUrlLogGroup"
      ]
    },
    "UploadTriggerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/python-pdf-chat/dev/1716421024077-2024-05-22T23:37:04.077Z/python-pdf-chat.zip"
        },
        "Handler": "src/upload_trigger/main.handler",
        "Runtime": "python3.11",
        "FunctionName": "python-pdf-chat-dev-UploadTrigger",
        "MemorySize": 1024,
        "Timeout": 6,
        "Architectures": [
          "arm64"
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_TABLE": {
              "Ref": "DocumentTable"
            },
            "MEMORY_TABLE": {
              "Ref": "MemoryTable"
            },
            "QUEUE": {
              "Fn::GetAtt": [
                "EmbeddingQueue",
                "QueueName"
              ]
            },
            "BUCKET": "python-pdf-chat-dev-us-east-1-947403101409"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:51"
        ]
      },
      "DependsOn": [
        "UploadTriggerLogGroup"
      ]
    },
    "GetDocumentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/python-pdf-chat/dev/1716421024077-2024-05-22T23:37:04.077Z/python-pdf-chat.zip"
        },
        "Handler": "src/get_document/main.handler",
        "Runtime": "python3.11",
        "FunctionName": "python-pdf-chat-dev-GetDocument",
        "MemorySize": 1024,
        "Timeout": 29,
        "Architectures": [
          "arm64"
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_TABLE": {
              "Ref": "DocumentTable"
            },
            "MEMORY_TABLE": {
              "Ref": "MemoryTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:51"
        ]
      },
      "DependsOn": [
        "GetDocumentLogGroup"
      ]
    },
    "GetAllDocumentsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/python-pdf-chat/dev/1716421024077-2024-05-22T23:37:04.077Z/python-pdf-chat.zip"
        },
        "Handler": "src/get_all_documents/main.handler",
        "Runtime": "python3.11",
        "FunctionName": "python-pdf-chat-dev-GetAllDocuments",
        "MemorySize": 1024,
        "Timeout": 29,
        "Architectures": [
          "arm64"
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_TABLE": {
              "Ref": "DocumentTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:51"
        ]
      },
      "DependsOn": [
        "GetAllDocumentsLogGroup"
      ]
    },
    "AddConversationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/python-pdf-chat/dev/1716421024077-2024-05-22T23:37:04.077Z/python-pdf-chat.zip"
        },
        "Handler": "src/add_conversation/main.handler",
        "Runtime": "python3.11",
        "FunctionName": "python-pdf-chat-dev-AddConversation",
        "MemorySize": 1024,
        "Timeout": 29,
        "Architectures": [
          "arm64"
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_TABLE": {
              "Ref": "DocumentTable"
            },
            "MEMORY_TABLE": {
              "Ref": "MemoryTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:51"
        ]
      },
      "DependsOn": [
        "AddConversationLogGroup"
      ]
    },
    "GenerateEmbeddingsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/python-pdf-chat/dev/1716421024077-2024-05-22T23:37:04.077Z/python-pdf-chat.zip"
        },
        "Handler": "src/generate_embeddings/main.handler",
        "Runtime": "python3.11",
        "FunctionName": "python-pdf-chat-dev-GenerateEmbeddings",
        "MemorySize": 1024,
        "Timeout": 29,
        "Architectures": [
          "arm64"
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "DOCUMENT_TABLE": {
              "Ref": "DocumentTable"
            },
            "BUCKET": "python-pdf-chat-dev-us-east-1-947403101409"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:51"
        ]
      },
      "DependsOn": [
        "GenerateEmbeddingsLogGroup"
      ]
    },
    "GenerateResponseLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/python-pdf-chat/dev/1716421024077-2024-05-22T23:37:04.077Z/python-pdf-chat.zip"
        },
        "Handler": "src/generate_response/main.handler",
        "Runtime": "python3.11",
        "FunctionName": "python-pdf-chat-dev-GenerateResponse",
        "MemorySize": 1024,
        "Timeout": 29,
        "Architectures": [
          "arm64"
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Environment": {
          "Variables": {
            "MEMORY_TABLE": {
              "Ref": "MemoryTable"
            },
            "BUCKET": "python-pdf-chat-dev-us-east-1-947403101409"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:51"
        ]
      },
      "DependsOn": [
        "GenerateResponseLogGroup"
      ]
    },
    "GeneratePresignedUrlLambdaVersionN4D6vnS2JVf7wrelYgj05wLNQw6uBIpGCHs018": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GeneratePresignedUrlLambdaFunction"
        },
        "CodeSha256": "WO1o/Xmjy/D0gfSP8Wq6V/F6z3ILDLoPuMlvUVCIKs8="
      }
    },
    "UploadTriggerLambdaVersion8nBwwrZtLhuYJyGhz4DQuF4w9KU9S0IBN1mCk17Kos": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadTriggerLambdaFunction"
        },
        "CodeSha256": "WO1o/Xmjy/D0gfSP8Wq6V/F6z3ILDLoPuMlvUVCIKs8="
      }
    },
    "GetDocumentLambdaVersionrEnbhofhuQFpQULoZiabNMFMShRwUmpk1UqArRzLGI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDocumentLambdaFunction"
        },
        "CodeSha256": "WO1o/Xmjy/D0gfSP8Wq6V/F6z3ILDLoPuMlvUVCIKs8="
      }
    },
    "GetAllDocumentsLambdaVersion5kIiSXbLY9qxyx5SedLOdxSrkrfIY29GjxBz9MxC6BY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllDocumentsLambdaFunction"
        },
        "CodeSha256": "WO1o/Xmjy/D0gfSP8Wq6V/F6z3ILDLoPuMlvUVCIKs8="
      }
    },
    "AddConversationLambdaVersionJw9ujQxpbXIGbTM1s0SzsAR4Zi0qgHthooywBG6Og": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddConversationLambdaFunction"
        },
        "CodeSha256": "WO1o/Xmjy/D0gfSP8Wq6V/F6z3ILDLoPuMlvUVCIKs8="
      }
    },
    "GenerateEmbeddingsLambdaVersionEWzsp7m9x3e1YrP8iIqEJqs1FTTj8pZSqCS5r0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GenerateEmbeddingsLambdaFunction"
        },
        "CodeSha256": "WO1o/Xmjy/D0gfSP8Wq6V/F6z3ILDLoPuMlvUVCIKs8="
      }
    },
    "GenerateResponseLambdaVersionaZcJrRaJHqQvoWXEsJzPBtqLrzrvF8dy4UPlwseFI4M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GenerateResponseLambdaFunction"
        },
        "CodeSha256": "WO1o/Xmjy/D0gfSP8Wq6V/F6z3ILDLoPuMlvUVCIKs8="
      }
    },
    "UploadTriggerCustomS31": {
      "Type": "Custom::S3",
      "Version": 1,
      "DependsOn": [
        "UploadTriggerLambdaFunction",
        "CustomDashresourceDashexistingDashs3LambdaFunction"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashexistingDashs3LambdaFunction",
            "Arn"
          ]
        },
        "FunctionName": "python-pdf-chat-dev-UploadTrigger",
        "BucketName": "python-pdf-chat-dev-us-east-1-947403101409",
        "BucketConfigs": [
          {
            "Event": "s3:ObjectCreated:*",
            "Rules": [
              {
                "Suffix": ".pdf"
              }
            ]
          }
        ]
      }
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "python-pdf-chat",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "s3",
                        "",
                        "",
                        "python-pdf-chat-dev-us-east-1-947403101409"
                      ]
                    ]
                  },
                  "Action": [
                    "s3:PutBucketNotification",
                    "s3:GetBucketNotification"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "lambda",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "function",
                        "*"
                      ]
                    ]
                  },
                  "Action": [
                    "lambda:AddPermission",
                    "lambda:RemovePermission"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CustomDashresourceDashexistingDashs3LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/python-pdf-chat/dev/1716421024077-2024-05-22T23:37:04.077Z/custom-resources.zip"
        },
        "FunctionName": "python-pdf-chat-dev-custom-resource-existing-s3",
        "Handler": "s3/handler.handler",
        "MemorySize": 1024,
        "Runtime": "nodejs16.x",
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ]
    },
    "GenerateEmbeddingsEventSourceMappingSQSEmbeddingQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 1,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "EmbeddingQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "GenerateEmbeddingsLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-python-pdf-chat",
        "ProtocolType": "HTTP",
        "CorsConfiguration": {
          "AllowHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amz-User-Agent",
            "X-Amzn-Trace-Id"
          ],
          "AllowMethods": [
            "OPTIONS",
            "GET",
            "POST"
          ],
          "AllowOrigins": [
            "*"
          ]
        }
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "HttpApiAuthorizerCognitoAuthorizer": {
      "Type": "AWS::ApiGatewayV2::Authorizer",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "Name": "cognitoAuthorizer",
        "IdentitySource": [
          "$request.header.Authorization"
        ],
        "AuthorizerType": "JWT",
        "JwtConfiguration": {
          "Audience": [
            {
              "Ref": "CognitoUserPoolClient"
            }
          ],
          "Issuer": {
            "Fn::Sub": "https://cognito-idp.us-east-1.amazonaws.com/${CognitoUserPool}"
          }
        }
      }
    },
    "GeneratePresignedUrlLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GeneratePresignedUrlLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGeneratePresignedUrl": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GeneratePresignedUrlLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetGenerateDashpresignedDashurl": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /generate-presigned-url",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGeneratePresignedUrl"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerCognitoAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationGeneratePresignedUrl"
    },
    "GetDocumentLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDocumentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetDocument": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetDocumentLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetDocDocumentidVarConversationidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /doc/{documentid}/{conversationId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetDocument"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerCognitoAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationGetDocument"
    },
    "GetAllDocumentsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllDocumentsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllDocuments": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllDocumentsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetDoc": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /doc",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllDocuments"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerCognitoAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllDocuments"
    },
    "AddConversationLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddConversationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAddConversation": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AddConversationLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostDocDocumentidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /doc/{documentid}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAddConversation"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerCognitoAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationAddConversation"
    },
    "GenerateResponseLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GenerateResponseLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGenerateResponse": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GenerateResponseLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostDocumentidVarConversationidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /{documentid}/{conversationid}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGenerateResponse"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerCognitoAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationGenerateResponse"
    },
    "DocumentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "python-pdf-chat-dev-us-east-1-947403101409",
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "GET",
                "PUT",
                "HEAD",
                "POST",
                "DELETE"
              ],
              "AllowedOrigins": [
                "*"
              ]
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        }
      }
    },
    "DocumentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "PolicyDocument": {
          "Id": "EnforceHttpsPolicy",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "EnforceHttpsSid",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:*",
              "Resource": [
                "arn:aws:s3:::python-pdf-chat-dev-us-east-1-947403101409/*",
                "arn:aws:s3:::python-pdf-chat-dev-us-east-1-947403101409"
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              }
            }
          ]
        },
        "Bucket": "python-pdf-chat-dev-us-east-1-947403101409"
      }
    },
    "EmbeddingQueue": {
      "Type": "AWS::SQS::Queue",
      "DeletionPolicy": "Delete",
      "UpdateReplacePolicy": "Delete",
      "Properties": {
        "VisibilityTimeout": 180,
        "MessageRetentionPeriod": 3600
      }
    },
    "EmbeddingQueuePolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "EmbeddingQueue"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "SecureTransportPolicy",
          "Statement": [
            {
              "Sid": "AllowSecureTransportOnly",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "SQS:*",
              "Resource": "*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "DocumentTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Delete",
      "UpdateReplacePolicy": "Delete",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "userid",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "documentid",
            "KeyType": "RANGE"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "userid",
            "AttributeType": "S"
          },
          {
            "AttributeName": "documentid",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "MemoryTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Delete",
      "UpdateReplacePolicy": "Delete",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "SessionId",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "SessionId",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "CognitoUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "DeletionPolicy": "Delete",
      "UpdateReplacePolicy": "Delete",
      "Properties": {
        "AutoVerifiedAttributes": [
          "email"
        ],
        "UsernameAttributes": [
          "email"
        ],
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": true
        },
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 8,
            "RequireLowercase": true,
            "RequireNumbers": true,
            "RequireSymbols": true,
            "RequireUppercase": true
          }
        }
      }
    },
    "CognitoUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "UserPoolId": {
          "Ref": "CognitoUserPool"
        },
        "ClientName": {
          "Ref": "CognitoUserPool"
        },
        "GenerateSecret": false
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-python-pdf-chat-dev-ServerlessDeploymentBucketName"
      }
    },
    "GeneratePresignedUrlLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GeneratePresignedUrlLambdaVersionN4D6vnS2JVf7wrelYgj05wLNQw6uBIpGCHs018"
      },
      "Export": {
        "Name": "sls-python-pdf-chat-dev-GeneratePresignedUrlLambdaFunctionQualifiedArn"
      }
    },
    "UploadTriggerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadTriggerLambdaVersion8nBwwrZtLhuYJyGhz4DQuF4w9KU9S0IBN1mCk17Kos"
      },
      "Export": {
        "Name": "sls-python-pdf-chat-dev-UploadTriggerLambdaFunctionQualifiedArn"
      }
    },
    "GetDocumentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDocumentLambdaVersionrEnbhofhuQFpQULoZiabNMFMShRwUmpk1UqArRzLGI"
      },
      "Export": {
        "Name": "sls-python-pdf-chat-dev-GetDocumentLambdaFunctionQualifiedArn"
      }
    },
    "GetAllDocumentsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllDocumentsLambdaVersion5kIiSXbLY9qxyx5SedLOdxSrkrfIY29GjxBz9MxC6BY"
      },
      "Export": {
        "Name": "sls-python-pdf-chat-dev-GetAllDocumentsLambdaFunctionQualifiedArn"
      }
    },
    "AddConversationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddConversationLambdaVersionJw9ujQxpbXIGbTM1s0SzsAR4Zi0qgHthooywBG6Og"
      },
      "Export": {
        "Name": "sls-python-pdf-chat-dev-AddConversationLambdaFunctionQualifiedArn"
      }
    },
    "GenerateEmbeddingsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GenerateEmbeddingsLambdaVersionEWzsp7m9x3e1YrP8iIqEJqs1FTTj8pZSqCS5r0"
      },
      "Export": {
        "Name": "sls-python-pdf-chat-dev-GenerateEmbeddingsLambdaFunctionQualifiedArn"
      }
    },
    "GenerateResponseLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GenerateResponseLambdaVersionaZcJrRaJHqQvoWXEsJzPBtqLrzrvF8dy4UPlwseFI4M"
      },
      "Export": {
        "Name": "sls-python-pdf-chat-dev-GenerateResponseLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-python-pdf-chat-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-python-pdf-chat-dev-HttpApiUrl"
      }
    },
    "CognitoUserPool": {
      "Value": {
        "Ref": "CognitoUserPool"
      }
    },
    "CognitoUserPoolClient": {
      "Value": {
        "Ref": "CognitoUserPoolClient"
      }
    }
  }
}